# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Testless Terraform Deploy"

on:
  push:
    branches:
      - "main"
  pull_request:

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Unit Tests
        run: echo "Mocking Unit Tests"

  build:
    name: "Deploy using Terraform"
    needs: [test]
    if: ${{ always() && (!contains(join(needs.*.result, ','), 'failure') && !contains(join(needs.*.result, ','), 'cancelled') && contains(join(needs.*.result, ','), 'success')) }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: arn:aws:iam::123456789100:role/my-github-actions-role
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          export TF_VAR_deployed_at=$(date +%s)
          if [[ -n ${{ secrets.AWS_ECR_REPO }} ]]; then ECR_REPO_NAME=${{ secrets.AWS_ECR_REPO }}; else ECR_REPO_NAME=${{ github.event.repository.name }}; fi
          if [[ -n ${{ secrets.AWS_BUCKET_NAME }} ]]; then BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}; else BUCKET_NAME=${{ github.event.repository.name }}; fi
          terraform plan -var=REPOSITORY_NAME=${{ github.event.repository.name }} -var=AWS_ECR_REPO=$ECR_REPO_NAME -var=AWS_BUCKET_NAME=$BUCKET_NAME

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: |
          export TF_VAR_deployed_at=$(date +%s)
          if [[ -n ${{ secrets.AWS_ECR_REPO }} ]]; then ECR_REPO_NAME=${{ secrets.AWS_ECR_REPO }}; else ECR_REPO_NAME=${{ github.event.repository.name }}; fi
          if [[ -n ${{ secrets.AWS_BUCKET_NAME }} ]]; then BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}; else BUCKET_NAME=${{ github.event.repository.name }}; fi
          terraform apply -auto-approve -var=REPOSITORY_NAME=${{ github.event.repository.name }} -var=AWS_ECR_REPO=$ECR_REPO_NAME -var=AWS_BUCKET_NAME=$BUCKET_NAME

  removing-images:
    name: "Removing previous ECR images"
    needs: [build]
    if: ${{ always() && (!contains(join(needs.*.result, ','), 'failure') && !contains(join(needs.*.result, ','), 'cancelled') && contains(join(needs.*.result, ','), 'success')) }}
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: arn:aws:iam::123456789100:role/my-github-actions-role
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
        env:
          AWS_EC2_METADATA_DISABLED: true
      - name: Remove previous ECR images
        run: |
          if [[ -n ${{ secrets.AWS_ECR_REPO }} ]]; then ECR_REPO_NAME=${{ secrets.AWS_ECR_REPO }}; else ECR_REPO_NAME=${{ github.event.repository.name }}; fi
          IMAGES_TO_DELETE=$( aws ecr list-images --repository-name $ECR_REPO_NAME --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
          N_IMAGES=${#IMAGES_TO_DELETE[@]}
          if [[ -n ${{ secrets.N_OLD_IMAGES_TO_KEEP }} ]]; then N_OLD_IMAGES_TO_KEEP=${{ secrets.N_OLD_IMAGES_TO_KEEP }}; else N_OLD_IMAGES_TO_KEEP=0; fi
          if (( $N_IMAGES > $N_OLD_IMAGES_TO_KEEP )); then aws ecr batch-delete-image --repository-name $ECR_REPO_NAME --image-ids "${IMAGES_TO_DELETE[@]:$N_OLD_IMAGES_TO_KEEP}"; else echo "No images to delete. Current images: $N_IMAGES"; fi

  slack-notification:
    runs-on: ubuntu-latest
    needs: [build, test, removing-images]
    if: always()
    steps:
      - uses: martialonline/workflow-status@v2
        id: check
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.check.outputs.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
